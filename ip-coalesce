#!/usr/bin/env python
import ipaddress
from sys import stdin, stderr, argv
from collections import defaultdict

def dbg(*args, **kwargs):
	if '-v' in argv:
		print(*args, **kwargs, file=stderr)

nets = defaultdict(set)
for i in stdin.read().splitlines():
	if ' - ' in i:
		i = i.split(' - ')
		newnets = ipaddress.summarize_address_range(
			ipaddress.IPv4Address(i[0]),
			ipaddress.IPv4Address(i[1]),
		)
	else:
		newnets = [ipaddress.ip_network(i)]
	for n in newnets:
		nets[n.prefixlen].add(n)

for prefixlen in range(32, 0, -1):
	for net in list(nets[prefixlen]):
		for superprefixlen in range(1, prefixlen):
			found = False
			for supernet in nets[superprefixlen]:
				if net.subnet_of(supernet):
					dbg(net, 'is a subnet of', supernet)
					nets[prefixlen].remove(net)
					found = True
					break
			if found:
				break

for prefixlen in nets:
	nets[prefixlen] = set(int(i.network_address) for i in nets[prefixlen])

for prefix in range(32, 0, -1):
	# mask for supernet
	mask = 0xffffffff - ((1 << 32-(prefix-1)) - 1)
	for supernet in set(i & mask for i in nets[prefix]):
		supernet_ips = [
			i for i in nets[prefix]
			if i & mask == supernet
		]
		if len(supernet_ips) == 2:
			dbg('coalescing %s' % [
				ipaddress.ip_network((i, prefix))
				for i in supernet_ips
			])
			nets[prefix-1].add(min(supernet_ips))
			for i in supernet_ips:
				nets[prefix].remove(i)

for prefixlen, subnets in nets.items():
	for subnet in subnets:
		print(ipaddress.ip_network((subnet, prefixlen)))
